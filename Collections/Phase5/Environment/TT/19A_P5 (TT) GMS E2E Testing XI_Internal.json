{
  "name": "19A_P5 (TT) GMS E2E Testing XI_Internal",
  "version": "1",
  "items": [
    {
      "type": "folder",
      "name": "01 - Guarantee Balance after release for transit GRN Type1",
      "root": {
        "docs": "IE015 > IE016",
        "meta": {
          "name": "01 - Guarantee Balance after release for transit GRN Type1"
        }
      },
      "items": [
        {
          "type": "http",
          "name": "01- POST GRN Balance Check Type1",
          "seq": 1,
          "request": {
            "url": "{{apiGRNbaseURL}}/:grn/balance",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/json",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.0+json",
                "enabled": true
              }
            ],
            "params": [
              {
                "name": "grn",
                "value": "23XI0000010000664",
                "type": "path",
                "enabled": true
              }
            ],
            "body": {
              "mode": "json",
              "json": "{\n  \"accessCode\": \"AC01\"\n}",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTGB1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",_.random(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "02- POST IE015 Simplified",
          "seq": 2,
          "request": {
            "url": "{{baseURL}}/movements/departures",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/xml",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.1+json",
                "enabled": true
              }
            ],
            "params": [],
            "body": {
              "mode": "xml",
              "xml": "<ncts:CC015C PhaseID=\"NCTS5.1\" xmlns:ncts=\"http://ncts.dgtaxud.ec\">\r\n    <messageSender>9999912345</messageSender>\r\n    <messageRecipient>NTA.XI</messageRecipient>\r\n    <preparationDateAndTime>{{preparationDateAndTime}}</preparationDateAndTime>\r\n    <messageIdentification>{{messageIdentification}}</messageIdentification>\r\n    <messageType>CC015C</messageType>\r\n    <TransitOperation>\r\n        <LRN>{{LRN}}</LRN>\r\n        <declarationType>T1</declarationType>\r\n        <additionalDeclarationType>A</additionalDeclarationType>\r\n        <security>0</security>\r\n        <reducedDatasetIndicator>0</reducedDatasetIndicator>\r\n        <bindingItinerary>0</bindingItinerary>\r\n        <limitDate>{{limitDate}}</limitDate>\r\n    </TransitOperation>\r\n    <Authorisation>\r\n        <sequenceNumber>1</sequenceNumber>\r\n        <type>C521</type>\r\n        <referenceNumber>XIAUTHDEP02</referenceNumber>\r\n    </Authorisation>\r\n    <CustomsOfficeOfDeparture>\r\n        <referenceNumber>XI000081</referenceNumber>\r\n    </CustomsOfficeOfDeparture>\r\n    <CustomsOfficeOfDestinationDeclared>\r\n        <referenceNumber>GB000060</referenceNumber>\r\n    </CustomsOfficeOfDestinationDeclared>\r\n    <CustomsOfficeOfTransitDeclared>\r\n        <sequenceNumber>1</sequenceNumber>\r\n        <referenceNumber>GB000060</referenceNumber>\r\n        <arrivalDateAndTimeEstimated>{{arrivalTime}}</arrivalDateAndTimeEstimated>\r\n    </CustomsOfficeOfTransitDeclared>\r\n    <HolderOfTheTransitProcedure>\r\n        <identificationNumber>XI175521246821</identificationNumber>\r\n    </HolderOfTheTransitProcedure>\r\n    <Guarantee>\r\n        <sequenceNumber>1</sequenceNumber>\r\n        <guaranteeType>1</guaranteeType>\r\n        <GuaranteeReference>\r\n            <sequenceNumber>1</sequenceNumber>\r\n            <GRN>23XI0000010000664</GRN>\r\n            <accessCode>AC01</accessCode>\r\n            <amountToBeCovered>1000.00</amountToBeCovered>\r\n            <currency>GBP</currency>\r\n        </GuaranteeReference>\r\n    </Guarantee>\r\n    <Consignment>\r\n        <countryOfDispatch>XI</countryOfDispatch>\r\n        <countryOfDestination>GB</countryOfDestination>\r\n        <containerIndicator>1</containerIndicator>\r\n        <grossMass>1000.000</grossMass>\r\n        <referenceNumberUCR>AB1234</referenceNumberUCR>\r\n        <Consignor>\r\n            <identificationNumber>XI175521246821</identificationNumber>\r\n        </Consignor>\r\n        <Consignee>\r\n            <identificationNumber>GB953574106000</identificationNumber>\r\n        </Consignee>\r\n        <TransportEquipment>\r\n            <sequenceNumber>1</sequenceNumber>\r\n            <containerIdentificationNumber>WGPCGR</containerIdentificationNumber>\r\n            <numberOfSeals>1</numberOfSeals>\r\n            <Seal>\r\n                <sequenceNumber>1</sequenceNumber>\r\n                <identifier>1234</identifier>\r\n            </Seal>\r\n        </TransportEquipment>\r\n        <LocationOfGoods>\r\n            <typeOfLocation>B</typeOfLocation>\r\n            <qualifierOfIdentification>Y</qualifierOfIdentification>\r\n            <authorisationNumber>XI DEP BT1 3ET</authorisationNumber>\r\n        </LocationOfGoods>\r\n        <DepartureTransportMeans>\r\n            <sequenceNumber>1</sequenceNumber>\r\n            <typeOfIdentification>30</typeOfIdentification>\r\n            <identificationNumber>NC15REG</identificationNumber>\r\n            <nationality>XI</nationality>\r\n        </DepartureTransportMeans>\r\n        <PlaceOfLoading>\r\n            <country>XI</country>\r\n            <location>Belfast</location>\r\n        </PlaceOfLoading>\r\n        <HouseConsignment>\r\n            <sequenceNumber>1</sequenceNumber>\r\n            <grossMass>1000.000</grossMass>\r\n            <ConsignmentItem>\r\n                <goodsItemNumber>1</goodsItemNumber>\r\n                <declarationGoodsItemNumber>1</declarationGoodsItemNumber>\r\n                <Commodity>\r\n                    <descriptionOfGoods>Plastic toys</descriptionOfGoods>\r\n                    <CommodityCode>\r\n                        <harmonizedSystemSubHeadingCode>392690</harmonizedSystemSubHeadingCode>\r\n                    </CommodityCode>\r\n                    <GoodsMeasure>\r\n                        <grossMass>1000.000</grossMass>\r\n                        <netMass>950.000</netMass>\r\n                    </GoodsMeasure>\r\n                </Commodity>\r\n                <Packaging>\r\n                    <sequenceNumber>1</sequenceNumber>\r\n                    <typeOfPackages>BX</typeOfPackages>\r\n                    <numberOfPackages>1</numberOfPackages>\r\n                    <shippingMarks>XI Box goods to be shipped</shippingMarks>\r\n                </Packaging>\r\n            </ConsignmentItem>\r\n        </HouseConsignment>\r\n    </Consignment>\r\n</ncts:CC015C>",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTXI1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "var jsonData = res.getBody();\nvar departureId =  jsonData._links.self.href.split(\"/\")[5]\nbru.setGlobalEnvVar(\"departureId\",departureId);\n\ntest(\"POST IE015 must return response code is 202\", function () {\n    expect(res.getStatus()).to.equal(202);\n});\n\nif (res.getStatus() !== 202) {\n    return;\n}\n",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "03- GET IE015 --IE928--IE028--Ie029",
          "seq": 3,
          "request": {
            "url": "{{baseURL}}/movements/departures/{{departureId}}/messages",
            "method": "GET",
            "headers": [
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.1+json",
                "enabled": true
              },
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              }
            ],
            "params": [],
            "body": {
              "mode": "none",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {},
            "vars": {},
            "assertions": [],
            "tests": "test(\"Get requested departure Id must return status code is 200\", function () {\n    expect(res.getStatus()).to.equal(200);\n});\nif (res.getStatus() !== 200) {\n    return;\n}",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "04- POST GRN Balance Post Check",
          "seq": 4,
          "request": {
            "url": "{{apiGRNbaseURL}}/:grn/balance",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/json",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.0+json",
                "enabled": true
              }
            ],
            "params": [
              {
                "name": "grn",
                "value": "23XI0000010000664",
                "type": "path",
                "enabled": true
              }
            ],
            "body": {
              "mode": "json",
              "json": "{\n  \"accessCode\": \"AC01\"\n}",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTGB1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",_.random(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "05- POST IE007 Normal",
          "seq": 5,
          "request": {
            "url": "{{baseURL}}/movements/arrivals",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/xml",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.1+json",
                "enabled": true
              }
            ],
            "params": [],
            "body": {
              "mode": "xml",
              "xml": "<ncts:CC007C PhaseID=\"NCTS5.1\" xmlns:ncts=\"http://ncts.dgtaxud.ec\">\n    <messageSender>9999912345</messageSender>\n    <messageRecipient>NTA.XI</messageRecipient>\n    <preparationDateAndTime>{{preparationDateAndTime}}</preparationDateAndTime>\n    <messageIdentification>{{messageIdentification}}</messageIdentification>\n    <messageType>CC007C</messageType>\n    <TransitOperation>\n        <MRN>23GB000246617ZHJJ0</MRN>\n        <arrivalNotificationDateAndTime>{{arrivalNotificationDateAndTime}}</arrivalNotificationDateAndTime>\n        <simplifiedProcedure>0</simplifiedProcedure>\n        <incidentFlag>0</incidentFlag>\n    </TransitOperation>\n    <CustomsOfficeOfDestinationActual>\n        <referenceNumber>XI000081</referenceNumber>\n    </CustomsOfficeOfDestinationActual>\n    <TraderAtDestination>\n        <identificationNumber>XI175521246821</identificationNumber>\n    </TraderAtDestination>\n    <Consignment>\n        <LocationOfGoods>\n            <typeOfLocation>C</typeOfLocation>\n            <qualifierOfIdentification>U</qualifierOfIdentification>\n            <UNLocode>GBBEL</UNLocode>\n        </LocationOfGoods>\n    </Consignment>\n</ncts:CC007C>",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\n\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalNotificationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\", (11190913102542,55190913102542))\n"
            },
            "vars": {},
            "assertions": [],
            "tests": "var jsonData = res.getBody();\nvar arrivalId =  jsonData._links.self.href.split(\"/\")[5]\n\nbru.setGlobalEnvVar(\"arrivalId\",arrivalId);\n\n\ntest(\"Status code is 202\", function () {\n    expect(res.getStatus()).to.equal(202);\n});\nif (res.getStatus() !== 202) {\n    return;\n}",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "06- GET ALL IE007 -- IE025 -- IE045",
          "seq": 6,
          "request": {
            "url": "{{baseURL}}/movements/arrivals/{{arrivalId}}/messages",
            "method": "GET",
            "headers": [
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.1+json",
                "enabled": true
              },
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/json",
                "enabled": false
              }
            ],
            "params": [],
            "body": {
              "mode": "none",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {},
            "vars": {},
            "assertions": [],
            "tests": "test(\"Get all messages must return status code 200\", function () {\n    expect(res.getStatus()).to.equal(200);\n});\nif (res.getStatus() !== 200) {\n    return;\n}",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "07- POST GRN Balance Post Check",
          "seq": 7,
          "request": {
            "url": "{{apiGRNbaseURL}}/:grn/balance",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/json",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.0+json",
                "enabled": true
              }
            ],
            "params": [
              {
                "name": "grn",
                "value": "23XI0000010000664",
                "type": "path",
                "enabled": true
              }
            ],
            "body": {
              "mode": "json",
              "json": "{\n  \"accessCode\": \"AC01\"\n}",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTGB1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",_.random(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        }
      ]
    },
    {
      "type": "folder",
      "name": "03 - N-A -Negative Test - Type09- Guarantee Balance after release for transit Multiple GRN types 0 1 9",
      "root": {
        "docs": "IE015 > IE016",
        "meta": {
          "name": "03 - N/A (Negative Test - Type09) Guarantee Balance after release for transit Multiple GRN types 0 1 9"
        }
      },
      "items": [
        {
          "type": "http",
          "name": "01- POST GRN Balance Check GRN Type 0",
          "seq": 1,
          "request": {
            "url": "{{apiGRNbaseURL}}/:grn/balance",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/json",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.0+json",
                "enabled": true
              }
            ],
            "params": [
              {
                "name": "grn",
                "value": "23XI0000010000116",
                "type": "path",
                "enabled": true
              }
            ],
            "body": {
              "mode": "json",
              "json": "{\n  \"accessCode\": \"AC01\"\n}",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTGB1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",_.random(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "01- POST IE015 Simplified",
          "seq": 4,
          "request": {
            "url": "{{baseURL}}/movements/departures",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/xml",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.1+json",
                "enabled": true
              }
            ],
            "params": [],
            "body": {
              "mode": "xml",
              "xml": "<ncts:CC015C PhaseID=\"NCTS5.1\" xmlns:ncts=\"http://ncts.dgtaxud.ec\">\r\n    <messageSender>9999912345</messageSender>\r\n    <messageRecipient>NTA.XI</messageRecipient>\r\n    <preparationDateAndTime>{{preparationDateAndTime}}</preparationDateAndTime>\r\n    <messageIdentification>{{messageIdentification}}</messageIdentification>\r\n    <messageType>CC015C</messageType>\r\n    <TransitOperation>\r\n        <LRN>{{LRN}}</LRN>\r\n        <declarationType>T1</declarationType>\r\n        <additionalDeclarationType>A</additionalDeclarationType>\r\n        <security>0</security>\r\n        <reducedDatasetIndicator>0</reducedDatasetIndicator>\r\n        <bindingItinerary>0</bindingItinerary>\r\n        <limitDate>{{limitDate}}</limitDate>\r\n    </TransitOperation>\r\n    <Authorisation>\r\n        <sequenceNumber>1</sequenceNumber>\r\n        <type>C521</type>\r\n        <referenceNumber>XIAUTHDEP02</referenceNumber>\r\n    </Authorisation>\r\n    <CustomsOfficeOfDeparture>\r\n        <referenceNumber>XI000081</referenceNumber>\r\n    </CustomsOfficeOfDeparture>\r\n    <CustomsOfficeOfDestinationDeclared>\r\n        <referenceNumber>GB000060</referenceNumber>\r\n    </CustomsOfficeOfDestinationDeclared>\r\n    <CustomsOfficeOfTransitDeclared>\r\n        <sequenceNumber>1</sequenceNumber>\r\n        <referenceNumber>GB000060</referenceNumber>\r\n        <arrivalDateAndTimeEstimated>{{arrivalTime}}</arrivalDateAndTimeEstimated>\r\n    </CustomsOfficeOfTransitDeclared>\r\n    <HolderOfTheTransitProcedure>\r\n        <identificationNumber>XI175521246821</identificationNumber>\r\n    </HolderOfTheTransitProcedure>\r\n    <Guarantee>\r\n        <sequenceNumber>1</sequenceNumber>\r\n        <guaranteeType>0</guaranteeType>\r\n        <GuaranteeReference>\r\n            <sequenceNumber>1</sequenceNumber>\r\n            <GRN>23XI00000100000D0</GRN>\r\n            <accessCode>AC01</accessCode>\r\n            <amountToBeCovered>100.00</amountToBeCovered>\r\n            <currency>GBP</currency>\r\n        </GuaranteeReference>\r\n    </Guarantee>\r\n    <Guarantee>\r\n        <sequenceNumber>2</sequenceNumber>\r\n        <guaranteeType>1</guaranteeType>\r\n        <GuaranteeReference>\r\n            <sequenceNumber>1</sequenceNumber>\r\n            <GRN>23XI00000100000D0</GRN>\r\n            <accessCode>AC01</accessCode>\r\n            <amountToBeCovered>100.00</amountToBeCovered>\r\n            <currency>GBP</currency>\r\n        </GuaranteeReference>\r\n    </Guarantee>\r\n    <Guarantee>\r\n        <sequenceNumber>3</sequenceNumber>\r\n        <guaranteeType>9</guaranteeType>\r\n        <GuaranteeReference>\r\n            <sequenceNumber>1</sequenceNumber>\r\n            <GRN>23XI00000100000D0</GRN>\r\n            <accessCode>AC01</accessCode>\r\n            <amountToBeCovered>100.00</amountToBeCovered>\r\n            <currency>GBP</currency>\r\n        </GuaranteeReference>\r\n    </Guarantee>\r\n    <Consignment>\r\n        <countryOfDispatch>XI</countryOfDispatch>\r\n        <countryOfDestination>GB</countryOfDestination>\r\n        <containerIndicator>1</containerIndicator>\r\n        <grossMass>1000.000</grossMass>\r\n        <referenceNumberUCR>AB1234</referenceNumberUCR>\r\n        <Consignor>\r\n            <identificationNumber>XI175521246821</identificationNumber>\r\n        </Consignor>\r\n        <Consignee>\r\n            <identificationNumber>GB953574106000</identificationNumber>\r\n        </Consignee>\r\n        <TransportEquipment>\r\n            <sequenceNumber>1</sequenceNumber>\r\n            <containerIdentificationNumber>WGPCGR</containerIdentificationNumber>\r\n            <numberOfSeals>1</numberOfSeals>\r\n            <Seal>\r\n                <sequenceNumber>1</sequenceNumber>\r\n                <identifier>1234</identifier>\r\n            </Seal>\r\n        </TransportEquipment>\r\n        <LocationOfGoods>\r\n            <typeOfLocation>B</typeOfLocation>\r\n            <qualifierOfIdentification>Y</qualifierOfIdentification>\r\n            <authorisationNumber>XI DEP BT1 3ET</authorisationNumber>\r\n        </LocationOfGoods>\r\n        <DepartureTransportMeans>\r\n            <sequenceNumber>1</sequenceNumber>\r\n            <typeOfIdentification>30</typeOfIdentification>\r\n            <identificationNumber>NC15REG</identificationNumber>\r\n            <nationality>XI</nationality>\r\n        </DepartureTransportMeans>\r\n        <PlaceOfLoading>\r\n            <country>XI</country>\r\n            <location>Belfast</location>\r\n        </PlaceOfLoading>\r\n        <HouseConsignment>\r\n            <sequenceNumber>1</sequenceNumber>\r\n            <grossMass>1000.000</grossMass>\r\n            <ConsignmentItem>\r\n                <goodsItemNumber>1</goodsItemNumber>\r\n                <declarationGoodsItemNumber>1</declarationGoodsItemNumber>\r\n                <Commodity>\r\n                    <descriptionOfGoods>Plastic toys</descriptionOfGoods>\r\n                    <CommodityCode>\r\n                        <harmonizedSystemSubHeadingCode>392690</harmonizedSystemSubHeadingCode>\r\n                    </CommodityCode>\r\n                    <GoodsMeasure>\r\n                        <grossMass>1000.000</grossMass>\r\n                        <netMass>950.000</netMass>\r\n                    </GoodsMeasure>\r\n                </Commodity>\r\n                <Packaging>\r\n                    <sequenceNumber>1</sequenceNumber>\r\n                    <typeOfPackages>BX</typeOfPackages>\r\n                    <numberOfPackages>1</numberOfPackages>\r\n                    <shippingMarks>XI Box goods to be shipped</shippingMarks>\r\n                </Packaging>\r\n            </ConsignmentItem>\r\n        </HouseConsignment>\r\n    </Consignment>\r\n</ncts:CC015C>",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTGB1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "var jsonData = res.getBody();\nvar departureId =  jsonData._links.self.href.split(\"/\")[5]\nbru.setGlobalEnvVar(\"departureId\",departureId);\n\ntest(\"POST IE015 must return response code is 202\", function () {\n    expect(res.getStatus()).to.equal(202);\n});\n\nif (res.getStatus() !== 202) {\n    return;\n}\n",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "02- GET IE015 -- IE056",
          "seq": 5,
          "request": {
            "url": "{{baseURL}}/movements/departures/{{departureId}}/messages/",
            "method": "GET",
            "headers": [
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.1+json",
                "enabled": true
              },
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              }
            ],
            "params": [],
            "body": {
              "mode": "none",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {},
            "vars": {},
            "assertions": [],
            "tests": "test(\"Get requested departure Id must return status code is 200\", function () {\n    expect(res.getStatus()).to.equal(200);\n});\nif (res.getStatus() !== 200) {\n    return;\n}",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "02- POST GRN Balance Check GRN Type 1",
          "seq": 2,
          "request": {
            "url": "{{apiGRNbaseURL}}/:grn/balance",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/json",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.0+json",
                "enabled": true
              }
            ],
            "params": [
              {
                "name": "grn",
                "value": "23XI0000010000210",
                "type": "path",
                "enabled": true
              }
            ],
            "body": {
              "mode": "json",
              "json": "{\n  \"accessCode\": \"AC01\"\n}",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTGB1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",_.random(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "03- POST GRN Balance Check GRN Type 9",
          "seq": 3,
          "request": {
            "url": "{{apiGRNbaseURL}}/:grn/balance",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/json",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.0+json",
                "enabled": true
              }
            ],
            "params": [
              {
                "name": "grn",
                "value": "23XI00000100001D4",
                "type": "path",
                "enabled": true
              }
            ],
            "body": {
              "mode": "json",
              "json": "{\n  \"accessCode\": \"AC01\"\n}",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTGB1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",_.random(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        }
      ]
    },
    {
      "type": "folder",
      "name": "02 - N-A -GRN Type4 Negative- Guarantee Balance after release for transit",
      "root": {
        "docs": "IE015 > IE016",
        "meta": {
          "name": "02 - N/A (GRN Type4 Negative) Guarantee Balance after release for transit"
        }
      },
      "items": [
        {
          "type": "http",
          "name": "01- POST GRN Balance Check Type4",
          "seq": 1,
          "request": {
            "url": "{{apiGRNbaseURL}}/:grn/balance",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/json",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.0+json",
                "enabled": true
              }
            ],
            "params": [
              {
                "name": "grn",
                "value": "23XI0000010000199",
                "type": "path",
                "enabled": true
              }
            ],
            "body": {
              "mode": "json",
              "json": "{\n  \"accessCode\": \"AC01\"\n}",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTGB1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",_.random(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "01- POST IE015 Simplified",
          "seq": 2,
          "request": {
            "url": "{{baseURL}}/movements/departures",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/xml",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.1+json",
                "enabled": true
              }
            ],
            "params": [],
            "body": {
              "mode": "xml",
              "xml": "<ncts:CC015C PhaseID=\"NCTS5.1\" xmlns:ncts=\"http://ncts.dgtaxud.ec\">\n    <messageSender>9999912345</messageSender>\n    <messageRecipient>NTA.XI</messageRecipient>\n    <preparationDateAndTime>{{preparationDateAndTime}}</preparationDateAndTime>\n    <messageIdentification>{{messageIdentification}}</messageIdentification>\n    <messageType>CC015C</messageType>\n    <TransitOperation>\n        <LRN>{{LRN}}</LRN>\n        <declarationType>T1</declarationType>\n        <additionalDeclarationType>A</additionalDeclarationType>\n        <security>0</security>\n        <reducedDatasetIndicator>0</reducedDatasetIndicator>\n        <bindingItinerary>0</bindingItinerary>\n        <limitDate>{{limitDate}}</limitDate>\n    </TransitOperation>\n    <Authorisation>\n        <sequenceNumber>1</sequenceNumber>\n        <type>C521</type>\n        <referenceNumber>XIAUTHDEP02</referenceNumber>\n    </Authorisation>\n    <CustomsOfficeOfDeparture>\n        <referenceNumber>XI000081</referenceNumber>\n    </CustomsOfficeOfDeparture>\n    <CustomsOfficeOfDestinationDeclared>\n        <referenceNumber>GB000060</referenceNumber>\n    </CustomsOfficeOfDestinationDeclared>\n    <CustomsOfficeOfTransitDeclared>\n        <sequenceNumber>1</sequenceNumber>\n        <referenceNumber>GB000060</referenceNumber>\n        <arrivalDateAndTimeEstimated>{{arrivalTime}}</arrivalDateAndTimeEstimated>\n    </CustomsOfficeOfTransitDeclared>\n    <HolderOfTheTransitProcedure>\n        <identificationNumber>XI175521246821</identificationNumber>\n    </HolderOfTheTransitProcedure>\n    <Guarantee>\n        <sequenceNumber>1</sequenceNumber>\n        <guaranteeType>1</guaranteeType>\n        <GuaranteeReference>\n            <sequenceNumber>1</sequenceNumber>\n            <GRN>23XI00000100000D0</GRN>\n            <accessCode>AC01</accessCode>\n            <amountToBeCovered>100.00</amountToBeCovered>\n            <currency>GBP</currency>\n        </GuaranteeReference>\n    </Guarantee>\n    <Consignment>\n        <countryOfDispatch>XI</countryOfDispatch>\n        <countryOfDestination>GB</countryOfDestination>\n        <containerIndicator>1</containerIndicator>\n        <grossMass>1000.000</grossMass>\n        <referenceNumberUCR>AB1234</referenceNumberUCR>\n        <Consignor>\n            <identificationNumber>XI175521246821</identificationNumber>\n        </Consignor>\n        <Consignee>\n            <identificationNumber>GB953574106000</identificationNumber>\n        </Consignee>\n        <TransportEquipment>\n            <sequenceNumber>1</sequenceNumber>\n            <containerIdentificationNumber>WGPCGR</containerIdentificationNumber>\n            <numberOfSeals>1</numberOfSeals>\n            <Seal>\n                <sequenceNumber>1</sequenceNumber>\n                <identifier>1234</identifier>\n            </Seal>\n        </TransportEquipment>\n        <LocationOfGoods>\n            <typeOfLocation>B</typeOfLocation>\n            <qualifierOfIdentification>Y</qualifierOfIdentification>\n            <authorisationNumber>XI DEP BT1 3ET</authorisationNumber>\n        </LocationOfGoods>\n        <DepartureTransportMeans>\n            <sequenceNumber>1</sequenceNumber>\n            <typeOfIdentification>30</typeOfIdentification>\n            <identificationNumber>NC15REG</identificationNumber>\n            <nationality>XI</nationality>\n        </DepartureTransportMeans>\n        <PlaceOfLoading>\n            <country>XI</country>\n            <location>Belfast</location>\n        </PlaceOfLoading>\n        <HouseConsignment>\n            <sequenceNumber>1</sequenceNumber>\n            <grossMass>1000.000</grossMass>\n            <ConsignmentItem>\n                <goodsItemNumber>1</goodsItemNumber>\n                <declarationGoodsItemNumber>1</declarationGoodsItemNumber>\n                <Commodity>\n                    <descriptionOfGoods>Plastic toys</descriptionOfGoods>\n                    <CommodityCode>\n                        <harmonizedSystemSubHeadingCode>392690</harmonizedSystemSubHeadingCode>\n                    </CommodityCode>\n                    <GoodsMeasure>\n                        <grossMass>1000.000</grossMass>\n                        <netMass>950.000</netMass>\n                    </GoodsMeasure>\n                </Commodity>\n                <Packaging>\n                    <sequenceNumber>1</sequenceNumber>\n                    <typeOfPackages>BX</typeOfPackages>\n                    <numberOfPackages>1</numberOfPackages>\n                    <shippingMarks>XI Box goods to be shipped</shippingMarks>\n                </Packaging>\n            </ConsignmentItem>\n        </HouseConsignment>\n    </Consignment>\n</ncts:CC015C>",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTGB1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "var jsonData = res.getBody();\nvar departureId =  jsonData._links.self.href.split(\"/\")[5]\nbru.setGlobalEnvVar(\"departureId\",departureId);\n\ntest(\"POST IE015 must return response code is 202\", function () {\n    expect(res.getStatus()).to.equal(202);\n});\n\nif (res.getStatus() !== 202) {\n    return;\n}\n",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "02- GET IE015 --IE928--IE028--Ie029 -- IE114 -- IE118",
          "seq": 3,
          "request": {
            "url": "{{baseURL}}/movements/departures/{{departureId}}/messages",
            "method": "GET",
            "headers": [
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.1+json",
                "enabled": true
              },
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              }
            ],
            "params": [],
            "body": {
              "mode": "none",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {},
            "vars": {},
            "assertions": [],
            "tests": "test(\"Get requested departure Id must return status code is 200\", function () {\n    expect(res.getStatus()).to.equal(200);\n});\nif (res.getStatus() !== 200) {\n    return;\n}",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        }
      ]
    },
    {
      "type": "folder",
      "name": "06 - N-A Guarantee Balance after release for transit Multiple GRN Types 0 1 4",
      "root": {
        "docs": "IE015 > IE016",
        "meta": {
          "name": "06 - N/A Guarantee Balance after release for transit Multiple GRN Types 0 1 4"
        }
      },
      "items": [
        {
          "type": "http",
          "name": "01- POST GRN Balance Check GRN Type 0",
          "seq": 1,
          "request": {
            "url": "{{apiGRNbaseURL}}/:grn/balance",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/json",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.0+json",
                "enabled": true
              }
            ],
            "params": [
              {
                "name": "grn",
                "value": "23XI0000010000655",
                "type": "path",
                "enabled": true
              }
            ],
            "body": {
              "mode": "json",
              "json": "{\n  \"accessCode\": \"AC01\"\n}",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTGB1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",_.random(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "01- POST IE015 Simplified",
          "seq": 4,
          "request": {
            "url": "{{baseURL}}/movements/departures",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/xml",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.1+json",
                "enabled": true
              }
            ],
            "params": [],
            "body": {
              "mode": "xml",
              "xml": "<ncts:CC015C PhaseID=\"NCTS5.1\" xmlns:ncts=\"http://ncts.dgtaxud.ec\">\n    <messageSender>9999912345</messageSender>\n    <messageRecipient>NTA.XI</messageRecipient>\n    <preparationDateAndTime>{{preparationDateAndTime}}</preparationDateAndTime>\n    <messageIdentification>{{messageIdentification}}</messageIdentification>\n    <messageType>CC015C</messageType>\n    <TransitOperation>\n        <LRN>{{LRN}}</LRN>\n        <declarationType>T1</declarationType>\n        <additionalDeclarationType>A</additionalDeclarationType>\n        <security>0</security>\n        <reducedDatasetIndicator>0</reducedDatasetIndicator>\n        <bindingItinerary>0</bindingItinerary>\n        <limitDate>{{limitDate}}</limitDate>\n    </TransitOperation>\n    <Authorisation>\n        <sequenceNumber>1</sequenceNumber>\n        <type>C521</type>\n        <referenceNumber>XIAUTHDEP02</referenceNumber>\n    </Authorisation>\n    <CustomsOfficeOfDeparture>\n        <referenceNumber>XI000081</referenceNumber>\n    </CustomsOfficeOfDeparture>\n    <CustomsOfficeOfDestinationDeclared>\n        <referenceNumber>GB000060</referenceNumber>\n    </CustomsOfficeOfDestinationDeclared>\n    <CustomsOfficeOfTransitDeclared>\n        <sequenceNumber>1</sequenceNumber>\n        <referenceNumber>GB000060</referenceNumber>\n        <arrivalDateAndTimeEstimated>{{arrivalTime}}</arrivalDateAndTimeEstimated>\n    </CustomsOfficeOfTransitDeclared>\n    <HolderOfTheTransitProcedure>\n        <identificationNumber>XI175521246821</identificationNumber>\n    </HolderOfTheTransitProcedure>\n    <Guarantee>\n        <sequenceNumber>1</sequenceNumber>\n        <guaranteeType>0</guaranteeType>\n        <GuaranteeReference>\n            <sequenceNumber>1</sequenceNumber>\n            <GRN>23XI0000010000655</GRN>\n            <accessCode>AC01</accessCode>\n            <amountToBeCovered>1000.00</amountToBeCovered>\n            <currency>GBP</currency>\n        </GuaranteeReference>\n    </Guarantee>\n    <Guarantee>\n        <sequenceNumber>2</sequenceNumber>\n        <guaranteeType>1</guaranteeType>\n        <GuaranteeReference>\n            <sequenceNumber>1</sequenceNumber>\n            <GRN>23XI0000010000664</GRN>\n            <accessCode>AC01</accessCode>\n            <amountToBeCovered>1000.00</amountToBeCovered>\n            <currency>GBP</currency>\n        </GuaranteeReference>\n    </Guarantee>\n      <Guarantee>\n        <sequenceNumber>3</sequenceNumber>\n        <guaranteeType>4</guaranteeType>\n        <GuaranteeReference>\n            <sequenceNumber>1</sequenceNumber>\n            <GRN>23XI0000010000664</GRN>\n            <accessCode>AC01</accessCode>\n            <amountToBeCovered>1000.00</amountToBeCovered>\n            <currency>GBP</currency>\n        </GuaranteeReference>\n    </Guarantee>\n    <Consignment>\n        <countryOfDispatch>XI</countryOfDispatch>\n        <countryOfDestination>GB</countryOfDestination>\n        <containerIndicator>1</containerIndicator>\n        <grossMass>1000.000</grossMass>\n        <referenceNumberUCR>AB1234</referenceNumberUCR>\n        <Consignor>\n            <identificationNumber>XI175521246821</identificationNumber>\n        </Consignor>\n        <Consignee>\n            <identificationNumber>GB953574106000</identificationNumber>\n        </Consignee>\n        <TransportEquipment>\n            <sequenceNumber>1</sequenceNumber>\n            <containerIdentificationNumber>WGPCGR</containerIdentificationNumber>\n            <numberOfSeals>1</numberOfSeals>\n            <Seal>\n                <sequenceNumber>1</sequenceNumber>\n                <identifier>1234</identifier>\n            </Seal>\n        </TransportEquipment>\n        <LocationOfGoods>\n            <typeOfLocation>B</typeOfLocation>\n            <qualifierOfIdentification>Y</qualifierOfIdentification>\n            <authorisationNumber>XI DEP BT1 3ET</authorisationNumber>\n        </LocationOfGoods>\n        <DepartureTransportMeans>\n            <sequenceNumber>1</sequenceNumber>\n            <typeOfIdentification>30</typeOfIdentification>\n            <identificationNumber>NC15REG</identificationNumber>\n            <nationality>XI</nationality>\n        </DepartureTransportMeans>\n        <PlaceOfLoading>\n            <country>XI</country>\n            <location>Belfast</location>\n        </PlaceOfLoading>\n        <HouseConsignment>\n            <sequenceNumber>1</sequenceNumber>\n            <grossMass>1000.000</grossMass>\n            <ConsignmentItem>\n                <goodsItemNumber>1</goodsItemNumber>\n                <declarationGoodsItemNumber>1</declarationGoodsItemNumber>\n                <Commodity>\n                    <descriptionOfGoods>Plastic toys</descriptionOfGoods>\n                    <CommodityCode>\n                        <harmonizedSystemSubHeadingCode>392690</harmonizedSystemSubHeadingCode>\n                    </CommodityCode>\n                    <GoodsMeasure>\n                        <grossMass>1000.000</grossMass>\n                        <netMass>950.000</netMass>\n                    </GoodsMeasure>\n                </Commodity>\n                <Packaging>\n                    <sequenceNumber>1</sequenceNumber>\n                    <typeOfPackages>BX</typeOfPackages>\n                    <numberOfPackages>1</numberOfPackages>\n                    <shippingMarks>XI Box goods to be shipped</shippingMarks>\n                </Packaging>\n            </ConsignmentItem>\n        </HouseConsignment>\n    </Consignment>\n</ncts:CC015C>",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTGB1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "var jsonData = res.getBody();\nvar departureId =  jsonData._links.self.href.split(\"/\")[5]\nbru.setGlobalEnvVar(\"departureId\",departureId);\n\ntest(\"POST IE015 must return response code is 202\", function () {\n    expect(res.getStatus()).to.equal(202);\n});\n\nif (res.getStatus() !== 202) {\n    return;\n}\n",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "02- GET IE015 --IE928--IE028--Ie029- IE045",
          "seq": 5,
          "request": {
            "url": "{{baseURL}}/movements/departures/{{departureId}}/messages/",
            "method": "GET",
            "headers": [
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.1+json",
                "enabled": true
              },
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              }
            ],
            "params": [],
            "body": {
              "mode": "none",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {},
            "vars": {},
            "assertions": [],
            "tests": "test(\"Get requested departure Id must return status code is 200\", function () {\n    expect(res.getStatus()).to.equal(200);\n});\nif (res.getStatus() !== 200) {\n    return;\n}",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "02- POST GRN Balance Check GRN Type 1",
          "seq": 2,
          "request": {
            "url": "{{apiGRNbaseURL}}/:grn/balance",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/json",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.0+json",
                "enabled": true
              }
            ],
            "params": [
              {
                "name": "grn",
                "value": "23XI0000010000664",
                "type": "path",
                "enabled": true
              }
            ],
            "body": {
              "mode": "json",
              "json": "{\n  \"accessCode\": \"AC01\"\n}",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTXI1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",_.random(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "03- POST GRN Balance Check GRN Type 4",
          "seq": 3,
          "request": {
            "url": "{{apiGRNbaseURL}}/:grn/balance",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/json",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.0+json",
                "enabled": true
              }
            ],
            "params": [
              {
                "name": "grn",
                "value": "23XI0000010000199V509498",
                "type": "path",
                "enabled": true
              }
            ],
            "body": {
              "mode": "json",
              "json": "{\n  \"accessCode\": \"AC01\"\n}",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTGB1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",_.random(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "06- GET ALL IE007 -- IE025",
          "seq": 7,
          "request": {
            "url": "{{baseURL}}/movements/arrivals/{{arrivalId}}/messages",
            "method": "GET",
            "headers": [
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.1+json",
                "enabled": true
              },
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/json",
                "enabled": false
              }
            ],
            "params": [],
            "body": {
              "mode": "none",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {},
            "vars": {},
            "assertions": [],
            "tests": "test(\"Get all messages must return status code 200\", function () {\n    expect(res.getStatus()).to.equal(200);\n});\nif (res.getStatus() !== 200) {\n    return;\n}",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "05- POST IE007",
          "seq": 6,
          "request": {
            "url": "{{baseURL}}/movements/arrivals",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/xml",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.1+json",
                "enabled": true
              }
            ],
            "params": [],
            "body": {
              "mode": "xml",
              "xml": "<ncts:CC007C PhaseID=\"NCTS5.1\" xmlns:ncts=\"http://ncts.dgtaxud.ec\">\n    <messageSender>9999912345</messageSender>\n    <messageRecipient>NTA.XI</messageRecipient>\n    <preparationDateAndTime>{{preparationDateAndTime}}</preparationDateAndTime>\n    <messageIdentification>{{messageIdentification}}</messageIdentification>\n    <messageType>CC007C</messageType>\n    <TransitOperation>\n        <MRN>23GB000246617ZHJJ0</MRN>\n        <arrivalNotificationDateAndTime>{{arrivalNotificationDateAndTime}}</arrivalNotificationDateAndTime>\n        <simplifiedProcedure>0</simplifiedProcedure>\n        <incidentFlag>0</incidentFlag>\n    </TransitOperation>\n    <CustomsOfficeOfDestinationActual>\n        <referenceNumber>XI000081</referenceNumber>\n    </CustomsOfficeOfDestinationActual>\n    <TraderAtDestination>\n        <identificationNumber>XI175521246821</identificationNumber>\n    </TraderAtDestination>\n    <Consignment>\n        <LocationOfGoods>\n            <typeOfLocation>C</typeOfLocation>\n            <qualifierOfIdentification>U</qualifierOfIdentification>\n            <UNLocode>GBBEL</UNLocode>\n        </LocationOfGoods>\n    </Consignment>\n</ncts:CC007C>",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\n\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalNotificationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\", (11190913102542,55190913102542))\n"
            },
            "vars": {},
            "assertions": [],
            "tests": "var jsonData = res.getBody();\nvar arrivalId =  jsonData._links.self.href.split(\"/\")[5]\n\nbru.setGlobalEnvVar(\"arrivalId\",arrivalId);\n\n\ntest(\"Status code is 202\", function () {\n    expect(res.getStatus()).to.equal(202);\n});\nif (res.getStatus() !== 202) {\n    return;\n}",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        }
      ]
    },
    {
      "type": "folder",
      "name": "07 - Guarantee Balance after release for transit Multiple GRN types 0 1",
      "root": {
        "docs": "IE015 > IE016",
        "meta": {
          "name": "07 - Guarantee Balance after release for transit Multiple GRN types 0 1"
        }
      },
      "items": [
        {
          "type": "http",
          "name": "01- POST GRN Balance Check GRN Type 0",
          "seq": 1,
          "request": {
            "url": "{{apiGRNbaseURL}}/:grn/balance",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/json",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.0+json",
                "enabled": true
              }
            ],
            "params": [
              {
                "name": "grn",
                "value": "23XI0000010000655",
                "type": "path",
                "enabled": true
              }
            ],
            "body": {
              "mode": "json",
              "json": "{\n  \"accessCode\": \"AC01\"\n}",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTGB1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",_.random(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "01- POST IE015 Simplified",
          "seq": 3,
          "request": {
            "url": "{{baseURL}}/movements/departures",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/xml",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.1+json",
                "enabled": true
              }
            ],
            "params": [],
            "body": {
              "mode": "xml",
              "xml": "<ncts:CC015C PhaseID=\"NCTS5.1\" xmlns:ncts=\"http://ncts.dgtaxud.ec\">\n    <messageSender>9999912345</messageSender>\n    <messageRecipient>NTA.XI</messageRecipient>\n    <preparationDateAndTime>{{preparationDateAndTime}}</preparationDateAndTime>\n    <messageIdentification>{{messageIdentification}}</messageIdentification>\n    <messageType>CC015C</messageType>\n    <TransitOperation>\n        <LRN>{{LRN}}</LRN>\n        <declarationType>T1</declarationType>\n        <additionalDeclarationType>A</additionalDeclarationType>\n        <security>0</security>\n        <reducedDatasetIndicator>0</reducedDatasetIndicator>\n        <bindingItinerary>0</bindingItinerary>\n        <limitDate>{{limitDate}}</limitDate>\n    </TransitOperation>\n    <Authorisation>\n        <sequenceNumber>1</sequenceNumber>\n        <type>C521</type>\n        <referenceNumber>XIAUTHDEP02</referenceNumber>\n    </Authorisation>\n    <CustomsOfficeOfDeparture>\n        <referenceNumber>XI000081</referenceNumber>\n    </CustomsOfficeOfDeparture>\n    <CustomsOfficeOfDestinationDeclared>\n        <referenceNumber>GB000060</referenceNumber>\n    </CustomsOfficeOfDestinationDeclared>\n    <CustomsOfficeOfTransitDeclared>\n        <sequenceNumber>1</sequenceNumber>\n        <referenceNumber>GB000060</referenceNumber>\n        <arrivalDateAndTimeEstimated>{{arrivalTime}}</arrivalDateAndTimeEstimated>\n    </CustomsOfficeOfTransitDeclared>\n    <HolderOfTheTransitProcedure>\n        <identificationNumber>XI175521246821</identificationNumber>\n    </HolderOfTheTransitProcedure>\n    <Guarantee>\n        <sequenceNumber>1</sequenceNumber>\n        <guaranteeType>0</guaranteeType>\n        <GuaranteeReference>\n            <sequenceNumber>1</sequenceNumber>\n            <GRN>23XI0000010000655</GRN>\n            <accessCode>AC01</accessCode>\n            <amountToBeCovered>1000.00</amountToBeCovered>\n            <currency>GBP</currency>\n        </GuaranteeReference>\n    </Guarantee>\n    <Guarantee>\n        <sequenceNumber>2</sequenceNumber>\n        <guaranteeType>1</guaranteeType>\n        <GuaranteeReference>\n            <sequenceNumber>1</sequenceNumber>\n            <GRN>23XI0000010000664</GRN>\n            <accessCode>AC01</accessCode>\n            <amountToBeCovered>1000.00</amountToBeCovered>\n            <currency>GBP</currency>\n        </GuaranteeReference>\n    </Guarantee>\n    <Consignment>\n        <countryOfDispatch>XI</countryOfDispatch>\n        <countryOfDestination>GB</countryOfDestination>\n        <containerIndicator>1</containerIndicator>\n        <grossMass>1000.000</grossMass>\n        <referenceNumberUCR>AB1234</referenceNumberUCR>\n        <Consignor>\n            <identificationNumber>XI175521246821</identificationNumber>\n        </Consignor>\n        <Consignee>\n            <identificationNumber>GB953574106000</identificationNumber>\n        </Consignee>\n        <TransportEquipment>\n            <sequenceNumber>1</sequenceNumber>\n            <containerIdentificationNumber>WGPCGR</containerIdentificationNumber>\n            <numberOfSeals>1</numberOfSeals>\n            <Seal>\n                <sequenceNumber>1</sequenceNumber>\n                <identifier>1234</identifier>\n            </Seal>\n        </TransportEquipment>\n        <LocationOfGoods>\n            <typeOfLocation>B</typeOfLocation>\n            <qualifierOfIdentification>Y</qualifierOfIdentification>\n            <authorisationNumber>XI DEP BT1 3ET</authorisationNumber>\n        </LocationOfGoods>\n        <DepartureTransportMeans>\n            <sequenceNumber>1</sequenceNumber>\n            <typeOfIdentification>30</typeOfIdentification>\n            <identificationNumber>NC15REG</identificationNumber>\n            <nationality>XI</nationality>\n        </DepartureTransportMeans>\n        <PlaceOfLoading>\n            <country>XI</country>\n            <location>Belfast</location>\n        </PlaceOfLoading>\n        <HouseConsignment>\n            <sequenceNumber>1</sequenceNumber>\n            <grossMass>1000.000</grossMass>\n            <ConsignmentItem>\n                <goodsItemNumber>1</goodsItemNumber>\n                <declarationGoodsItemNumber>1</declarationGoodsItemNumber>\n                <Commodity>\n                    <descriptionOfGoods>Plastic toys</descriptionOfGoods>\n                    <CommodityCode>\n                        <harmonizedSystemSubHeadingCode>392690</harmonizedSystemSubHeadingCode>\n                    </CommodityCode>\n                    <GoodsMeasure>\n                        <grossMass>1000.000</grossMass>\n                        <netMass>950.000</netMass>\n                    </GoodsMeasure>\n                </Commodity>\n                <Packaging>\n                    <sequenceNumber>1</sequenceNumber>\n                    <typeOfPackages>BX</typeOfPackages>\n                    <numberOfPackages>1</numberOfPackages>\n                    <shippingMarks>XI Box goods to be shipped</shippingMarks>\n                </Packaging>\n            </ConsignmentItem>\n        </HouseConsignment>\n    </Consignment>\n</ncts:CC015C>",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTGB1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "var jsonData = res.getBody();\nvar departureId =  jsonData._links.self.href.split(\"/\")[5]\nbru.setGlobalEnvVar(\"departureId\",departureId);\n\ntest(\"POST IE015 must return response code is 202\", function () {\n    expect(res.getStatus()).to.equal(202);\n});\n\nif (res.getStatus() !== 202) {\n    return;\n}\n",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "02- GET IE015 --IE928--IE028--Ie029- IE045",
          "seq": 4,
          "request": {
            "url": "{{baseURL}}/movements/departures/{{departureId}}/messages",
            "method": "GET",
            "headers": [
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.1+json",
                "enabled": true
              },
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              }
            ],
            "params": [],
            "body": {
              "mode": "none",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {},
            "vars": {},
            "assertions": [],
            "tests": "test(\"Get requested departure Id must return status code is 200\", function () {\n    expect(res.getStatus()).to.equal(200);\n});\nif (res.getStatus() !== 200) {\n    return;\n}",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "02- POST GRN Balance Check GRN Type 1",
          "seq": 2,
          "request": {
            "url": "{{apiGRNbaseURL}}/:grn/balance",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/json",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.0+json",
                "enabled": true
              }
            ],
            "params": [
              {
                "name": "grn",
                "value": "23XI0000010000664",
                "type": "path",
                "enabled": true
              }
            ],
            "body": {
              "mode": "json",
              "json": "{\n  \"accessCode\": \"AC01\"\n}",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTXI1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",_.random(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "06- GET ALL IE007 -- IE025",
          "seq": 6,
          "request": {
            "url": "{{baseURL}}/movements/arrivals/650abcaa6e713c35/messages",
            "method": "GET",
            "headers": [
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.0+json",
                "enabled": true
              },
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/json",
                "enabled": false
              }
            ],
            "params": [],
            "body": {
              "mode": "none",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {},
            "vars": {},
            "assertions": [],
            "tests": "test(\"Get all messages must return status code 200\", function () {\n    expect(res.getStatus()).to.equal(200);\n});\nif (res.getStatus() !== 200) {\n    return;\n}",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "05- POST IE007 normal",
          "seq": 5,
          "request": {
            "url": "{{baseURL}}/movements/arrivals",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/xml",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.1+json",
                "enabled": true
              }
            ],
            "params": [],
            "body": {
              "mode": "xml",
              "xml": "<ncts:CC007C PhaseID=\"NCTS5.1\" xmlns:ncts=\"http://ncts.dgtaxud.ec\">\n    <messageSender>9999912345</messageSender>\n    <messageRecipient>NTA.XI</messageRecipient>\n    <preparationDateAndTime>{{preparationDateAndTime}}</preparationDateAndTime>\n    <messageIdentification>{{messageIdentification}}</messageIdentification>\n    <messageType>CC007C</messageType>\n    <TransitOperation>\n        <MRN>23GB000246617ZHJJ0</MRN>\n        <arrivalNotificationDateAndTime>{{arrivalNotificationDateAndTime}}</arrivalNotificationDateAndTime>\n        <simplifiedProcedure>0</simplifiedProcedure>\n        <incidentFlag>0</incidentFlag>\n    </TransitOperation>\n    <CustomsOfficeOfDestinationActual>\n        <referenceNumber>XI000081</referenceNumber>\n    </CustomsOfficeOfDestinationActual>\n    <TraderAtDestination>\n        <identificationNumber>XI175521246821</identificationNumber>\n    </TraderAtDestination>\n    <Consignment>\n        <LocationOfGoods>\n            <typeOfLocation>C</typeOfLocation>\n            <qualifierOfIdentification>U</qualifierOfIdentification>\n            <UNLocode>GBBEL</UNLocode>\n        </LocationOfGoods>\n    </Consignment>\n</ncts:CC007C>",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\n\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalNotificationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\", (11190913102542,55190913102542))\n"
            },
            "vars": {},
            "assertions": [],
            "tests": "var jsonData = res.getBody();\nvar arrivalId =  jsonData._links.self.href.split(\"/\")[5]\n\nbru.setGlobalEnvVar(\"arrivalId\",arrivalId);\n\n\ntest(\"Status code is 202\", function () {\n    expect(res.getStatus()).to.equal(202);\n});\nif (res.getStatus() !== 202) {\n    return;\n}",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        }
      ]
    },
    {
      "type": "folder",
      "name": "09 - Guarantee Balance Enquiry Type0",
      "root": {
        "docs": "IE015 > IE016",
        "meta": {
          "name": "09 - Guarantee Balance Enquiry Type0"
        }
      },
      "items": [
        {
          "type": "http",
          "name": "01- POST GRN Balance Check Send within 60 mins",
          "seq": 2,
          "request": {
            "url": "{{apiGRNbaseURL}}/:grn/balance",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/json",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.0+json",
                "enabled": true
              }
            ],
            "params": [
              {
                "name": "grn",
                "value": "23XI0000010000655",
                "type": "path",
                "enabled": true
              }
            ],
            "body": {
              "mode": "json",
              "json": "{\n  \"accessCode\": \"AC01\"\n}",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTGB1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",_.random(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "01- POST GRN Balance Check Type0",
          "seq": 1,
          "request": {
            "url": "{{apiGRNbaseURL}}/:grn/balance",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/json",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.0+json",
                "enabled": true
              }
            ],
            "params": [
              {
                "name": "grn",
                "value": "23XI0000010000655",
                "type": "path",
                "enabled": true
              }
            ],
            "body": {
              "mode": "json",
              "json": "{\n  \"accessCode\": \"AC01\"\n}",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTGB1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",_.random(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "01- POST Invalid Access Codea and valid GRN Balance Check",
          "seq": 4,
          "request": {
            "url": "{{apiGRNbaseURL}}/:grn/balance",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/json",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.0+json",
                "enabled": true
              }
            ],
            "params": [
              {
                "name": "grn",
                "value": "23XI0000010000655",
                "type": "path",
                "enabled": true
              }
            ],
            "body": {
              "mode": "json",
              "json": "{\n  \"accessCode\": \"AC00\"\n}",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTGB1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",_.random(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "01- POST Invalid GRN Balance Check",
          "seq": 3,
          "request": {
            "url": "{{apiGRNbaseURL}}/:grn/balance",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/json",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.0+json",
                "enabled": true
              }
            ],
            "params": [
              {
                "name": "grn",
                "value": "23XI0000010000656",
                "type": "path",
                "enabled": true
              }
            ],
            "body": {
              "mode": "json",
              "json": "{\n  \"accessCode\": \"AC01\"\n}",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTGB1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",_.random(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        }
      ]
    },
    {
      "type": "folder",
      "name": "08 - N-A Guarantee Balance after release for transit Multiple GRN types 0 1 2",
      "root": {
        "docs": "IE015 > IE016",
        "meta": {
          "name": "08 - N/A Guarantee Balance after release for transit Multiple GRN types 0 1 2"
        }
      },
      "items": [
        {
          "type": "http",
          "name": "01- POST GRN Balance Check GRN Type 0",
          "seq": 1,
          "request": {
            "url": "{{apiGRNbaseURL}}/:grn/balance",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/json",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.0+json",
                "enabled": true
              }
            ],
            "params": [
              {
                "name": "grn",
                "value": "23XI0000010000116",
                "type": "path",
                "enabled": true
              }
            ],
            "body": {
              "mode": "json",
              "json": "{\n  \"accessCode\": \"AC01\"\n}",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTGB1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",_.random(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "01- POST IE015 Simplified",
          "seq": 4,
          "request": {
            "url": "{{baseURL}}/movements/departures",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/xml",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.1+json",
                "enabled": true
              }
            ],
            "params": [],
            "body": {
              "mode": "xml",
              "xml": "<ncts:CC015C PhaseID=\"NCTS5.0\" xmlns:ncts=\"http://ncts.dgtaxud.ec\">\n    <messageSender>9999912345</messageSender>\n    <messageRecipient>NTA.XI</messageRecipient>\n    <preparationDateAndTime>{{preparationDateAndTime}}</preparationDateAndTime>\n    <messageIdentification>{{messageIdentification}}</messageIdentification>\n    <messageType>CC015C</messageType>\n    <TransitOperation>\n        <LRN>{{LRN}}</LRN>\n        <declarationType>T1</declarationType>\n        <additionalDeclarationType>A</additionalDeclarationType>\n        <security>0</security>\n        <reducedDatasetIndicator>0</reducedDatasetIndicator>\n        <bindingItinerary>0</bindingItinerary>\n        <limitDate>{{limitDate}}</limitDate>\n    </TransitOperation>\n    <Authorisation>\n        <sequenceNumber>1</sequenceNumber>\n        <type>C521</type>\n        <referenceNumber>XIDEPAUTH002</referenceNumber>\n    </Authorisation>\n    <CustomsOfficeOfDeparture>\n        <referenceNumber>XI000081</referenceNumber>\n    </CustomsOfficeOfDeparture>\n    <CustomsOfficeOfDestinationDeclared>\n        <referenceNumber>GB000060</referenceNumber>\n    </CustomsOfficeOfDestinationDeclared>\n    <CustomsOfficeOfTransitDeclared>\n        <sequenceNumber>1</sequenceNumber>\n        <referenceNumber>GB000060</referenceNumber>\n        <arrivalDateAndTimeEstimated>{{arrivalTime}}</arrivalDateAndTimeEstimated>\n    </CustomsOfficeOfTransitDeclared>\n    <HolderOfTheTransitProcedure>\n        <identificationNumber>XI985524247819</identificationNumber>\n    </HolderOfTheTransitProcedure>\n    <Guarantee>\n        <sequenceNumber>1</sequenceNumber>\n        <guaranteeType>0</guaranteeType>\n        <GuaranteeReference>\n            <sequenceNumber>1</sequenceNumber>\n            <GRN>23XI0000010000116</GRN>\n            <accessCode>AC01</accessCode>\n            <amountToBeCovered>10000.00</amountToBeCovered>\n            <currency>GBP</currency>\n        </GuaranteeReference>\n    </Guarantee>\n    <Guarantee>\n        <sequenceNumber>2</sequenceNumber>\n        <guaranteeType>1</guaranteeType>\n        <GuaranteeReference>\n            <sequenceNumber>1</sequenceNumber>\n            <GRN>23XI0000010000210</GRN>\n            <accessCode>AC01</accessCode>\n            <amountToBeCovered>25000.00</amountToBeCovered>\n            <currency>GBP</currency>\n        </GuaranteeReference>\n    </Guarantee>\n    <Guarantee>\n        <sequenceNumber>3</sequenceNumber>\n        <guaranteeType>2</guaranteeType>\n        <GuaranteeReference>\n            <sequenceNumber>1</sequenceNumber>\n            <GRN>23XI0000010000239</GRN>\n            <accessCode>AC01</accessCode>\n            <amountToBeCovered>4000.00</amountToBeCovered>\n            <currency>GBP</currency>\n        </GuaranteeReference>\n    </Guarantee>\n    <Consignment>\n      <countryOfDispatch>XI</countryOfDispatch>\n        <countryOfDestination>GB</countryOfDestination>\n        <containerIndicator>1</containerIndicator>\n        <grossMass>1000.00</grossMass>\n        <referenceNumberUCR>AB1234</referenceNumberUCR>\n        <Consignor>\n            <identificationNumber>XI985524247819</identificationNumber>\n        </Consignor>\n        <Consignee>\n            <identificationNumber>GB954131533000</identificationNumber>\n        </Consignee>\n        <TransportEquipment>\n            <sequenceNumber>1</sequenceNumber>\n            <containerIdentificationNumber>WGPCGR</containerIdentificationNumber>\n            <numberOfSeals>1</numberOfSeals>\n            <Seal>\n                <sequenceNumber>1</sequenceNumber>\n                <identifier>1234</identifier>\n            </Seal>\n        </TransportEquipment>\n        <LocationOfGoods>\n            <typeOfLocation>B</typeOfLocation>\n            <qualifierOfIdentification>Y</qualifierOfIdentification>\n            <authorisationNumber>XI DEP BT1 3ET</authorisationNumber>\n        </LocationOfGoods>\n        <DepartureTransportMeans>\n            <sequenceNumber>1</sequenceNumber>\n            <typeOfIdentification>30</typeOfIdentification>\n            <identificationNumber>NC15REG</identificationNumber>\n            <nationality>XI</nationality>\n        </DepartureTransportMeans>\n        <!--<PlaceOfLoading>\n            <country>XI</country>\n            <location>Belfast</location>\n        </PlaceOfLoading>-->\n        <HouseConsignment>\n            <sequenceNumber>1</sequenceNumber>\n            <grossMass>1000.00</grossMass>\n            <ConsignmentItem>\n                <goodsItemNumber>1</goodsItemNumber>\n                <declarationGoodsItemNumber>1</declarationGoodsItemNumber>\n                <Commodity>\n                    <descriptionOfGoods>Pharmaceuticals</descriptionOfGoods>\n                    <CommodityCode>\n                        <harmonizedSystemSubHeadingCode>392690</harmonizedSystemSubHeadingCode>\n                    </CommodityCode>\n                    <GoodsMeasure>\n                        <grossMass>1000.00</grossMass>\n                        <netMass>950.00</netMass>\n                    </GoodsMeasure>\n                </Commodity>\n                <Packaging>\n                    <sequenceNumber>1</sequenceNumber>\n                    <typeOfPackages>BX</typeOfPackages>\n                    <numberOfPackages>1</numberOfPackages>\n                    <shippingMarks>Pharmaceuticals to be shipped</shippingMarks>\n                </Packaging>\n            </ConsignmentItem>\n        </HouseConsignment>\n    </Consignment>\n</ncts:CC015C>",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTGB1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "var jsonData = res.getBody();\nvar departureId =  jsonData._links.self.href.split(\"/\")[5]\nbru.setGlobalEnvVar(\"departureId\",departureId);\n\ntest(\"POST IE015 must return response code is 202\", function () {\n    expect(res.getStatus()).to.equal(202);\n});\n\nif (res.getStatus() !== 202) {\n    return;\n}\n",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "02- GET IE015 --IE928--IE028--Ie029- IE045",
          "seq": 5,
          "request": {
            "url": "{{baseURL}}/movements/departures/{{departureId}}/messages",
            "method": "GET",
            "headers": [
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.1+json",
                "enabled": true
              },
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              }
            ],
            "params": [],
            "body": {
              "mode": "none",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {},
            "vars": {},
            "assertions": [],
            "tests": "test(\"Get requested departure Id must return status code is 200\", function () {\n    expect(res.getStatus()).to.equal(200);\n});\nif (res.getStatus() !== 200) {\n    return;\n}",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "02- POST GRN Balance Check GRN Type 1",
          "seq": 2,
          "request": {
            "url": "{{apiGRNbaseURL}}/:grn/balance",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/json",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.0+json",
                "enabled": true
              }
            ],
            "params": [
              {
                "name": "grn",
                "value": "23XI0000010000210",
                "type": "path",
                "enabled": true
              }
            ],
            "body": {
              "mode": "json",
              "json": "{\n  \"accessCode\": \"AC01\"\n}",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTXI1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",_.random(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "03- POST GRN Balance Check GRN Type 2",
          "seq": 3,
          "request": {
            "url": "{{apiGRNbaseURL}}/:grn/balance",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/json",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.0+json",
                "enabled": true
              }
            ],
            "params": [
              {
                "name": "grn",
                "value": "23XI0000010000239",
                "type": "path",
                "enabled": true
              }
            ],
            "body": {
              "mode": "json",
              "json": "{\n  \"accessCode\": \"AC01\"\n}",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTGB1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",_.random(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "06- GET ALL IE007 -- IE025",
          "seq": 7,
          "request": {
            "url": "{{baseURL}}/movements/arrivals/{{arrivalId}}/messages",
            "method": "GET",
            "headers": [
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.1+json",
                "enabled": true
              },
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/json",
                "enabled": false
              }
            ],
            "params": [],
            "body": {
              "mode": "none",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {},
            "vars": {},
            "assertions": [],
            "tests": "test(\"Get all messages must return status code 200\", function () {\n    expect(res.getStatus()).to.equal(200);\n});\nif (res.getStatus() !== 200) {\n    return;\n}",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "05- POST IE007 normal",
          "seq": 6,
          "request": {
            "url": "{{baseURL}}/movements/arrivals",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/xml",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.1+json",
                "enabled": true
              }
            ],
            "params": [],
            "body": {
              "mode": "xml",
              "xml": "<ncts:CC007C PhaseID=\"NCTS5.1\" xmlns:ncts=\"http://ncts.dgtaxud.ec\">\n    <messageSender>9999912345</messageSender>\n    <messageRecipient>NTA.XI</messageRecipient>\n    <preparationDateAndTime>{{preparationDateAndTime}}</preparationDateAndTime>\n    <messageIdentification>{{messageIdentification}}</messageIdentification>\n    <messageType>CC007C</messageType>\n    <TransitOperation>\n        <MRN>23GB000246617ZHJJ0</MRN>\n        <arrivalNotificationDateAndTime>{{arrivalNotificationDateAndTime}}</arrivalNotificationDateAndTime>\n        <simplifiedProcedure>0</simplifiedProcedure>\n        <incidentFlag>0</incidentFlag>\n    </TransitOperation>\n    <CustomsOfficeOfDestinationActual>\n        <referenceNumber>XI000081</referenceNumber>\n    </CustomsOfficeOfDestinationActual>\n    <TraderAtDestination>\n        <identificationNumber>XI175521246821</identificationNumber>\n    </TraderAtDestination>\n    <Consignment>\n        <LocationOfGoods>\n            <typeOfLocation>C</typeOfLocation>\n            <qualifierOfIdentification>U</qualifierOfIdentification>\n            <UNLocode>GBBEL</UNLocode>\n        </LocationOfGoods>\n    </Consignment>\n</ncts:CC007C>",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\n\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalNotificationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\", (11190913102542,55190913102542))\n"
            },
            "vars": {},
            "assertions": [],
            "tests": "var jsonData = res.getBody();\nvar arrivalId =  jsonData._links.self.href.split(\"/\")[5]\n\nbru.setGlobalEnvVar(\"arrivalId\",arrivalId);\n\n\ntest(\"Status code is 202\", function () {\n    expect(res.getStatus()).to.equal(202);\n});\nif (res.getStatus() !== 202) {\n    return;\n}",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        }
      ]
    },
    {
      "type": "folder",
      "name": "10 - Guarantee Balance Enquiry Type1",
      "root": {
        "docs": "IE015 > IE016",
        "meta": {
          "name": "10 - Guarantee Balance Enquiry Type1"
        }
      },
      "items": [
        {
          "type": "http",
          "name": "01- POST GRN Balance Check Send within 60 mins",
          "seq": 2,
          "request": {
            "url": "{{apiGRNbaseURL}}/:grn/balance",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/json",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.0+json",
                "enabled": true
              }
            ],
            "params": [
              {
                "name": "grn",
                "value": "23XI0000010000664",
                "type": "path",
                "enabled": true
              }
            ],
            "body": {
              "mode": "json",
              "json": "{\n  \"accessCode\": \"AC01\"\n}",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTGB1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",_.random(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "01- POST GRN Balance Check Type1",
          "seq": 1,
          "request": {
            "url": "{{apiGRNbaseURL}}/:grn/balance",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/json",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.0+json",
                "enabled": true
              }
            ],
            "params": [
              {
                "name": "grn",
                "value": "23XI0000010000664",
                "type": "path",
                "enabled": true
              }
            ],
            "body": {
              "mode": "json",
              "json": "{\n  \"accessCode\": \"AC01\"\n}",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTGB1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",_.random(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "01- POST Invalid Access Codea and valid GRN Balance Check",
          "seq": 4,
          "request": {
            "url": "{{apiGRNbaseURL}}/:grn/balance",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/json",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.0+json",
                "enabled": true
              }
            ],
            "params": [
              {
                "name": "grn",
                "value": "23XI0000010000664",
                "type": "path",
                "enabled": true
              }
            ],
            "body": {
              "mode": "json",
              "json": "{\n  \"accessCode\": \"AC00\"\n}",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTGB1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",_.random(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "01- POST Invalid GRN Balance Check",
          "seq": 3,
          "request": {
            "url": "{{apiGRNbaseURL}}/:grn/balance",
            "method": "POST",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer {{access_token}}",
                "enabled": true
              },
              {
                "name": "Content-Type",
                "value": "application/json",
                "enabled": true
              },
              {
                "name": "Accept",
                "value": "application/vnd.hmrc.2.0+json",
                "enabled": true
              }
            ],
            "params": [
              {
                "name": "grn",
                "value": "23XI0000010000665",
                "type": "path",
                "enabled": true
              }
            ],
            "body": {
              "mode": "json",
              "json": "{\n  \"accessCode\": \"AC01\"\n}",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "req": "const moment = require('moment');\nlet now = moment();\nnow.add('14', 'days');\n\nlet limitDate = now.format(\"YYYY-MM-DD\")\n\nlet arrivalTime = moment();\narrivalTime.add('14', 'days');\n\nlet LRN=\"TRATESTGB1\";\nlet charset = moment().format(\"YYMMDDHHmm\");\n\nLRN += charset;\n\nbru.setVar(\"LRN\", LRN);\nbru.setVar(\"limitDate\", limitDate);\nbru.setVar(\"preparationDateAndTime\", moment().format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"arrivalTime\", arrivalTime.format(\"YYYY-MM-DDThh:mm:ss\"));\nbru.setVar(\"messageIdentification\",_.random(11190913102542,55190913102542))"
            },
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        }
      ]
    }
  ],
  "environments": [],
  "root": {
    "request": {
      "auth": {
        "mode": "none"
      },
      "vars": {
        "req": [
          {
            "name": "LRN",
            "value": "",
            "enabled": true,
            "local": false,
            "uid": "NqNawtuGPijnqkEP1lXCL"
          },
          {
            "name": "limitDate",
            "value": "",
            "enabled": true,
            "local": false,
            "uid": "1EFbnU6sMci5atKfG1mSw"
          },
          {
            "name": "preparationDateAndTime",
            "value": "",
            "enabled": true,
            "local": false,
            "uid": "U3ksYbwHqhdbODZtkHgvB"
          },
          {
            "name": "arrivalTime",
            "value": "",
            "enabled": true,
            "local": false,
            "uid": "pwVz7h0jbUXyxXRR0UsPK"
          },
          {
            "name": "messageIdentification",
            "value": "",
            "enabled": true,
            "local": false,
            "uid": "mWP9Wj8hEWtmqRKDAORrX"
          },
          {
            "name": "arrivalNotificationDateAndTime",
            "value": "",
            "enabled": true,
            "local": false,
            "uid": "fayZwBMCV6Us2R1m9RF8J"
          }
        ]
      }
    },
    "meta": {
      "name": "19A_P5 (TT) GMS E2E Testing XI_Internal"
    }
  },
  "brunoConfig": {
    "version": "1",
    "name": "19A_P5 (TT) GMS E2E Testing XI_Internal",
    "type": "collection",
    "ignore": [
      "node_modules",
      ".git"
    ]
  }
}